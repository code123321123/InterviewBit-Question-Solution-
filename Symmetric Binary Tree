Problem Description

Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).





Solution:
------------------------------------------------------------------------------------------------------------------------------------------

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 int mirror(TreeNode* root1, TreeNode *root2)
 {
     if(root1==NULL && root2==NULL) return 1;
    if( root1 && root2 && root1->val==root2->val )
    {
        return mirror(root1->left,root2->right) && mirror(root1->right,root2->left);
       
    }
    return 0;
 }
int Solution::isSymmetric(TreeNode* A) {
    
    int x=mirror(A, A);
    return x;
}

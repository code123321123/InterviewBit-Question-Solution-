Problem Description

Given a collection of intervals, merge all overlapping intervals.
Problem Constraints

1 <= Total number of intervals <= 100000.



Input Format

First argument is a list of intervals.



Output Format

Return the sorted list of intervals after merging all the overlapping intervals.



Example Input

Input 1:

[1,3],[2,6],[8,10],[15,18]


Example Output

Output 1:

[1,6],[8,10],[15,18]


Example Explanation

Explanation 1:

Merge intervals [1,3] and [2,6] -> [1,6].
so, the required answer after merging is [1,6],[8,10],[15,18].
No more overlapping intervals present.




==================================================================================================================
Solution
=================================================================================================================
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 bool compareToInterval(Interval i1 , Interval i2)
 {
     return (i1.start<i2.start);
     
 }
vector<Interval> Solution::merge(vector<Interval> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    vector<Interval>res;
    sort(A.begin(), A.end(),compareToInterval);
    stack<Interval>st;
    st.push(A[0]);
    for(int i=1;i<A.size();i++)
    {
        Interval top=st.top();
        if(top.end<A[i].start)
        {
           st.push(A[i]);
        }
        else if (top.end<A[i].end)
        {
           top.end=A[i].end;
           st.pop();
           st.push(top);
        }
    }
    vector<Interval>ans;
    while(!st.empty())
    {
        Interval top=st.top();
        ans.emplace_back(top);
        st.pop();
    }
    reverse(ans.begin(), ans.end());
    return ans;
    
}

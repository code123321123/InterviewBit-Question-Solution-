Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

===================================================================================================================================
Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.





SOLUTION :
==================================================================================================
 This probelm is connected  as finding the max area  of Rectangle in a histogram .
 if matrix[i][j]==1 then populate a new array and find area corresponding area , and do it for all rows  and find max Area
 
 
 CODE :
 class Solution {
    
    public int largestRectangleArea(int[] heights) {
        
        int n=heights.length;
        Stack<Integer>st=new Stack<>();
        int left[]=new int[n];
        int right[]=new int[n];
        
        for(int i=0;i<n;i++)
        {
            if(st.isEmpty())
            {
                left[i]=0;
                st.push(i);
            }
            else
            {
                while(!st.isEmpty() && heights[st.peek()]>=heights[i])
                    st.pop();
                
                left[i]=st.isEmpty()?0:st.peek()+1;
                st.push(i);
            }
        }
        
        while(!st.isEmpty())
            st.pop();
        
        for(int i=n-1;i>=0;--i)
        {
            if(st.isEmpty())
            {
                right[i]=n-1;
                st.push(i);
            }
            else
            {
                while(!st.isEmpty() && heights[st.peek()]>=heights[i])
                    st.pop();
                
                right[i]=st.isEmpty()?n-1:st.peek()-1;
                st.push(i);
            }
        }
        
        int maxArea=0;
        for(int i=0;i<n;i++)
        {
            maxArea=Math.max(maxArea,heights[i]*(right[i]-left[i]+1));
            
        }
        return maxArea;
        
        
        
        
        
    }
    
    
    public int maximalRectangle(char[][] matrix) {
       
        int n=matrix.length;
        int m=matrix[0].length;
        
//         int arr[][]=new int[n][m];
                      
//                     for(int i=0;i<n;i++)
//                      {
//                       for(int j=0;j<m;j++)
//                       {
//                           if(matrix[i][j]=='1')
//                               arr[i][j]=1;
//                           else
//                           {
//                              arr[i][j]=0; 
//                           }
//                       }
//                      }
                     
                     int target[]=new int[m];
                     for(int i=0;i<m;i++)
                     {
                         target[i]=0;
                     }
                     int maxArea=0;
                   for(int i=0;i<n;i++)
                     {
                         for(int j=0;j<m;j++)
                         {
                           if(matrix[i][j]=='1')
                           {
                               target[j]++;
                           }
                             else
                             {
                                 target[j]=0;
                             }
                         }
                         int area=largestRectangleArea(target);
                         maxArea=Math.max(maxArea,area);
                         
                     }
                     return maxArea;
                     
                     
                     
                     
                     
        
        
        
    }
}
